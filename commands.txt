# Docker Commands and Their Uses

1. `docker build .`  
   - Use this command to build a Docker image based on the instructions in the `Dockerfile` located in the current directory.

2. `docker-compose build`  
   - Builds the services defined in the `docker-compose.yml` file, incorporating any additional configurations or dependencies specified for each service.

3. `docker-compose run --rm app sh -c "flake8"`  
   - Runs the Flake8 linter inside the `app` service container to check your code for PEP8 compliance and other style issues.  
   - The `--rm` flag ensures the container is removed after the command finishes.

4. `docker-compose run --rm app sh -c "django-admin startproject app ."`  
   - Creates a new Django project named `app` in the current directory using `django-admin`, executed inside the `app` service container.  
   - The `--rm` flag cleans up the container after the project is created.

5. `docker compose up`  
   - Starts all the services defined in the `docker-compose.yml` file, creating and running containers for each service.  
   - Use `-d` to run services in detached mode (e.g., `docker compose up -d`).

6. `docker-compose run --rm app sh -c "python manage.py test"`  
   - Runs Django's test suite inside the `app` service container.  
   - This command executes all test cases defined in your Django project.  
   - The `--rm` flag ensures the container is removed after the tests are completed.  
   - Use this to validate your application's functionality and ensure no tests are failing.

